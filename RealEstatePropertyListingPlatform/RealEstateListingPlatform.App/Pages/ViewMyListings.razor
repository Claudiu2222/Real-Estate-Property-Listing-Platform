@page "/viewmylistings"
@using RealEstateListingPlatform.App.Contracts
@using RealEstateListingPlatform.App.Services.Responses
@using RealEstateListingPlatform.App.ViewModels
@using Microsoft.AspNetCore.Authorization
<head>
    <link href="css/app.css"/>
</head>

@attribute [Authorize(Roles = "User")]
<h3 class="mb-4 text-center text-primary">Listing Overview</h3>

@if (listingsResponse?.Success == true && listingsResponse.Listings.Any())
{
    <div class="container">
        <div class="row">
            @foreach (var listing in listingsResponse.Listings)
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card h-100 shadow-sm selectable-card" @onclick="() => OnListingClick(listing.ListingId)">
                        @if (listing.Photos.Any())
                        {
                            <img src="@listing.Photos.FirstOrDefault()" class="card-img-top" alt="Listing Image" style="height: 200px; object-fit: cover;">
                        }
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@listing.Title</h5>
                            <p class="card-text text-secondary">@TruncateDescription(listing.Description,90)</p>
                            <p class="card-text mt-auto">
                                <span class="text-dark">@listing.Price.Value @listing.Price.Currency</span>
                                <span class="badge @(listing.Negotiable ? "bg-success" : "bg-danger")">@("Negotiable")</span>
                            </p>
                        </div>
                        <div class="card-footer d-flex justify-content-between align-items-center">
                            <small class="text-muted">Updated @listing.DateUpdated.ToString("yyyy-MM-dd HH:mm")</small>
                            <div>
                                @* <button class="btn btn-primary btn-sm" @onclick="() => EditListing(listing.ListingId)">
                                    <i class="bi bi-pencil-square"></i> Edit
                                </button> *@
                            <button @onclick="()=>EditListing(listing.ListingId)" class="button-edit">
                                <svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1.5">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M19.553 21.281l-1.834-1.833" />
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M18.719 16.594l-1.833-1.833" />
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6.5l-8 8" />
                                </svg>
                            </button>
                            <button @onclick="()=>DeleteListing(listing.ListingId)" class="button-delete">
                                <svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1.5">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                </svg>
                            </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        <Pager TotalCount="@listingsResponse.TotalCount" PageSize="pageSize" OnPage="LoadPage" />
    </div>
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            @for (int i = 1; i <= TotalPages(); i++)
            {
                var pageNr = i;
                <li class="page-item @(pageNr == currentPage ? "active" : "")">
                    <button class="page-link" @onclick="() => LoadPage(pageNr)">@pageNr</button>
                </li>
            }
        </ul>
    </nav>
}
else
{
    <div class="alert alert-warning" role="alert">
        No listings available.
    </div>
}
@code {

    [Inject]
    public IListingDataService ListingDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Parameter]
    public ApiResponseListing listingsResponse { get; set; }

    
    private int currentPage = 1;
    private int pageSize = 9; // Set your default page size

    [Parameter]
    public EventCallback<string> OnListingSelected { get; set; }

    string error { get; set; }

    private int TotalPages() => (int)Math.Ceiling((double)listingsResponse.TotalCount / pageSize);

    private async Task LoadPage(int pageNumber)
    {
        Console.WriteLine("Loading page {pageNumber}");
        currentPage = pageNumber;
        try
        {
            listingsResponse = await ListingDataService.GetPagedListingsForUserAsync(pageNumber, pageSize);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadPage(currentPage);
    }
    private string TruncateDescription(string description, int maxLength)
    {
        if (string.IsNullOrEmpty(description)) return description;
        return description.Length <= maxLength ? description : description.Substring(0, maxLength) + "...";
    }

    private void EditListing(string listindId)
    {
        NavigationManager.NavigateTo($"/editlisting/{listindId}");
        return;
    }

    private async void DeleteListing(string listingId)
    {
        Guid guid = Guid.Parse(listingId);
        RefreshPage();
        await ListingDataService.DeleteListingAsync(guid);
    }

    private void RefreshPage()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
    private void OnListingClick(string listingId)
    {
        OnListingSelected.InvokeAsync(listingId);
        ViewListing(listingId);
    }
    private void ViewListing(string listing)
    {
        NavigationManager.NavigateTo($"/viewlisting/{listing}");
    }

}