@page "/editlisting/{ListingId}"
@using RealEstateListingPlatform.App.Contracts
@using RealEstateListingPlatform.App.ViewModels
@using RealEstatePropertyListingPlatform.Domain.Enums
@inject HttpClient Http
<head>
    <link href="css/app.css" rel="stylesheet" />
    <link href="css/addlisting.css" rel="stylesheet" />
</head>
<h3>Edit your listing</h3>

<div class="@GetAlertClass() mb-3 ms-2" style="display: @(string.IsNullOrWhiteSpace(Message) ? "none" : "block");">
    <div class="d-flex align-items-center">
        <div class="me-2">
            <svg id="checkmark" xmlns="http://www.w3.org/2000/svg" style="width: 24px; height: 24px; transform-origin: center; transition: transform 0.3s ease-in-out;" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                <polyline points="22 4 12 14.01 9 11.01"></polyline>
            </svg>
        </div>
        <div>@Message</div>
    </div>
</div>

<EditForm Model="@ListingViewModelById" OnValidSubmit="@HandleValidSubmit">

    <DataAnnotationsValidator />

    <div class="row mb-3 ms-2">
        <label for="streetname" class="col-sm-3 form-label">🔖Title:</label>
        <div class="col-sm-5">
            <InputText id="title" class="form-control" @bind-Value="@ListingViewModelById.Title" placeholder="@ListingViewModelById.Title"></InputText>
            <ValidationMessage For="@(() => ListingViewModelById.Title)" />
        </div>
    </div>

    <div class="row mb-3 ms-2">
        <label for="price" class="col-sm-3 form-label">💲Price:</label>
        <div class="col-sm-5">
            <InputNumber id="price" class="form-control" @bind-Value="@initialPrice.Value" placeholder="Value"></InputNumber>
            <!-- Input pentru valoarea numerică -->
            <InputSelect id="price-currency" class="form-control" @bind-Value="@initialPrice.Currency">

                @foreach (var currency in Enum.GetValues(typeof(Currency)))
                {
                    <option value="@currency">@currency</option>
                })

            </InputSelect>
            <ValidationMessage For="@(() => price.Value)" />
            <ValidationMessage For="@(() => price.Currency)" />
        </div>
    </div>

    <div class="row mb-3 ms-2">
        <label for="description" class="col-sm-3 form-label">📝Description:</label>
        <div class="col-sm-5">
            <InputTextArea id="description" class="form-control" @bind-Value="@ListingViewModelById.Description" placeholder="@ListingViewModelById.Description"></InputTextArea>
            <ValidationMessage For="@(() => ListingViewModelById.Description)" />
        </div>

    </div>
    <div class="row mb-3 ms-2">
        <label for="photos" class="col-sm-3 form-label">📸Photos:</label>
        <div class="col-sm-9">
            <InputFile class="choosefile" OnChange="HandleFileSelected" multiple />
            <h3>Uploaded photos</h3>
            @if (initialPhotos.Any())
            {
                <div>
                    @for (int i = 0; i < initialPhotos.Count; i++)
                    {
                        var index = i;
                        <div>
                            <img src="@initialPhotos[index]" style="width: 100px; height: 100px; padding: 10px;" class="@index"/>
                            <button type="button" @onclick="() => DeleteUploadedImage(index)" class="button-delete">
                                <svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1.5">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                                </svg>
                            </button>
                        </div>
                    }
                </div>
            }

            @if (imagesBase64.Any())
            {
                <div>
                    <h3>Selected Images To Upload:</h3>
                    @for (int i = 0; i < imagesBase64.Count; i++)
                    {
                        var index = i;
                        <div>
                            <img src="@imagesBase64[index]" style="width: 100px; height: 100px; padding: 10px;" class="@index"/>
                            <button @onclick="() => DeleteImageToBeUploaded(index)" type="button" class="button-delete">
                                <svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1.5">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                                </svg>
                            </button>
                        </div>
                    }
                </div>
            }

        </div>
    </div>

    <div class="row mb-3 ms-2">
        <label for="negotiable" class="col-sm-3 form-label">🤝🏻Negotiable:</label>
        <div class="col-sm-5">
            <div class="form-check">
                <InputCheckbox id="negotiable" class="form-check-input" type="checkbox" @bind-Value="@negotiable" />
                <label class="form-check-label" for="negotiable">Negotiable</label>
            </div>
            <ValidationMessage For="@(() => ListingViewModelById.Negotiable)" />
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Save listing</button>
    <button class="btn btn-primary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    [Parameter]
    public string ListingId { get; set; }

    [Inject]
    public IListingDataService ListingDataService { get; set; }

    [Inject]
    public IUserService UserService { get; set; }

    [Inject]
    public IImageUploadService ImageUploadService { get; set; }

    public ListingViewModel ListingViewModelById { get; set; } = new ListingViewModel();

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public PriceViewModel initialPrice { get; set; } = new PriceViewModel();

    public PriceViewModel price { get; set; } = new PriceViewModel();

    public List<String> initialPhotos { get; set; } = new List<String>();
    public List<String> toBeDeletedPhotos { get; set; } = new List<String>();

    public bool negotiable { get; set; }

    public ListingViewModelCreate ListingViewModel { get; set; } = new ListingViewModelCreate();

    public string Message { get; set; }

    private List<string> uploadedImageUrls = new List<string>();
    private List<string> imagesBase64 = new List<string>();
    private int maxFileSize = 1024 * 1024 * 10; //10mb

    protected override async Task OnInitializedAsync()
    {
        Guid guid = Guid.Parse(ListingId);
        ListingViewModelById = await ListingDataService.GetListingByIdAsync(guid);
        initialPrice = ListingViewModelById.Price;
        for(int i = 0; i < ListingViewModelById.Photos.Count ; i++)
        {
            initialPhotos.Add(ListingViewModelById.Photos[i]);
        }

        negotiable = ListingViewModelById.Negotiable;

    }

    private async Task HandleValidSubmit()
    {
        uploadedImageUrls.Clear();
        
        for (int i = 0; i < toBeDeletedPhotos.Count; i++)
        {
            try
            {
                var response = await ImageUploadService.DeleteImage(toBeDeletedPhotos[i]);
                Console.WriteLine(response);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }

        }
        var currentUserInfoResponse = await UserService.GetInfoCurrentUser();
        if (!currentUserInfoResponse.IsSuccess)
        {
            Console.WriteLine("Error getting current user info");
            return;
        }
        var currentUserId = currentUserInfoResponse.Data.Id;
        for (int i = 0; i < imagesBase64.Count; i++)
        {
            try
            {
                var filename = $"{currentUserId}_{Guid.NewGuid()}.jpg";
                var uploadImageResult = await ImageUploadService.GetPresignedUrl(filename);
                Console.WriteLine(uploadImageResult.Success);
                if (uploadImageResult.Success)
                {
                    var preSignedUrl = uploadImageResult.UploadUrl;
                    var byteArray = Convert.FromBase64String(imagesBase64[i].Split(',')[1]);
                    using var content = new ByteArrayContent(byteArray);
                    ImageUploadService.UploadImageToStorage(preSignedUrl, content);
                    var imageUrl = ImageUploadService.GetFileUrl(filename);
                    uploadedImageUrls.Add(imageUrl);

                }
            }
            catch (Exception ex)
            {
                Message = ex.Message;
                Console.WriteLine(ex.Message);
                Console.WriteLine("Error uploading image");
            }
        }



        ListingViewModelById.Price = initialPrice;
        ListingViewModelById.Photos = new List<string>();
        Console.WriteLine("Photos:" + initialPhotos);
        string[] photos = initialPhotos.ToArray();
        ListingViewModelById.Photos.AddRange(photos);
        ListingViewModelById.Photos.AddRange(uploadedImageUrls);
        

        ListingViewModelById.Negotiable = negotiable;

        Message = string.Empty;
        var result = await ListingDataService.UpdateListingAsync(ListingViewModelById);
        if (result.Success)
        {
            Message = "Listing updated successfully";

            StateHasChanged();
            await Task.Delay(2500); //wait for the message to be displayed
            NavigationManager.NavigateTo("/viewmylistings");

        }
        else
        {
            for (int i = 0; i < result.ValidationErrors.Count; i++)
            {
                Message += result.ValidationErrors[i] + " ";
            }
        }


    }
    private string GetAlertClass()
    {
        if (string.IsNullOrWhiteSpace(Message))
        {
            return "alert alert-info"; // sau o altă clasă pentru alerte informative
        }

        return Message.StartsWith("Listing updated successfully") ? "alert alert-success" : "alert alert-danger";
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/viewmylistings");
    }

    private void ToggleNegotiable(ChangeEventArgs e)
    {
        if (e.Value is bool value)
        {
            ListingViewModel.Negotiable = value;
        }
    }
    private void DeleteUploadedImage(int index)
    {
        if (initialPhotos.Count <= 1 || index >= initialPhotos.Count )
            return;
       
        toBeDeletedPhotos.Add(initialPhotos[index].Split('/').Last().Split('?').First());
        initialPhotos.RemoveAt(index);
    }

    private void DeleteImageToBeUploaded(int index)
    {
        if (index < 0 || index >= imagesBase64.Count)
        {
            Console.WriteLine("Index out of range");
            return;
        }
        imagesBase64.RemoveAt(index);
        StateHasChanged();

    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            var fileType = file.ContentType;
            var buffer = new byte[file.Size];
            await file.OpenReadStream(maxFileSize).ReadAsync(buffer);
            var base64Data = Convert.ToBase64String(buffer);
            imagesBase64.Add($"data:{fileType};base64,{base64Data}");
        }
        StateHasChanged();
    }

}
