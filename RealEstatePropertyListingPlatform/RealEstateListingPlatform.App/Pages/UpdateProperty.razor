@page "/editproperty/{PropertyId}"
@using RealEstateListingPlatform.App.Contracts
@using RealEstateListingPlatform.App.ViewModels
@using RealEstatePropertyListingPlatform.Domain.Enums
@inject IJSRuntime JSRuntime
<head>
    <link href="/css/app.css" rel="stylesheet" />
    <link href="/css/editproperty.css" rel="stylesheet" />
    <script>
        // Initialize and add the map and pin location from longitude and latitude
function initialize() {
            //timer to wait for the map to load
            setTimeout(function () {
                var latitude = document.getElementById('latitude').value;
                var longitude = document.getElementById('longitude').value;
                var myLatLng = { lat: parseFloat(latitude), lng: parseFloat(longitude) };
                var map = new google.maps.Map(document.getElementById('map'), {
                    zoom: 15,
                    center: myLatLng
                });
                var marker = new google.maps.Marker({
                    position: myLatLng,
                    map: map,
                    title: 'Property location'
                });
                google.maps.event.addListener(map, 'click', function (event) {
                // Verificăm dacă marker-ul există deja, și-l ștergem dacă da
                if (marker && marker.setMap) {
                    marker.setMap(null);
                }
                // Creăm un nou marker
                marker = new google.maps.Marker({
                    position: event.latLng,
                    map: map,
                });

                // Actualizăm valorile Latitudinii și Longitudinii în ViewModel
                var latitudeInput = document.getElementById("latitude");
                var longitudeInput = document.getElementById("longitude");
                latitudeInput.value = event.latLng.lat().toString();
                longitudeInput.value = event.latLng.lng().toString();
            });
            }, 1000);
        }
        window.getPropertyValue = function (elementId) {
            var element = document.getElementById(elementId);
            if (element) {
                return element.value;
            }
            return null;
        }
    </script>
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyCJGNELETRarTh8XctiWzsHND25SawIV1g&callback=initialize"></script>
    
    <style>
        body {
            background: linear-gradient(to right, #6a11cb 0%, #2575fc 100%) !important;
        }

    </style>
</head>

<div class="title-container">
    <h3 class="mb-4 text-center">✏️Update Property</h3>
</div>
<div class="@GetAlertClass() mb-3 ms-2" style="display: @(string.IsNullOrWhiteSpace(Message) ? "none" : "block");">
    <div class="d-flex align-items-center">
        <div class="me-2">
                <svg id="checkmark" xmlns="http://www.w3.org/2000/svg" style="width: 24px; height: 24px; transform-origin: center; transition: transform 0.3s ease-in-out;" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                 <polyline points="22 4 12 14.01 9 11.01"></polyline>
                </svg>
            </div>
        <div>@Message</div>
    </div>
</div>


<div class="container">
    <div class="row justify-content-center">
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                    <EditForm Model="@PropertyViewModelUser" OnValidSubmit="@HandleValidSubmit">

                        <DataAnnotationsValidator />

                        <div class="row mb-3 ms-2">
                                <label for="streetname" class="col-sm-3 form-label">📫Street name:</label>
                            <div class="col-sm-5">
                                <InputText id="streetname" class="form-control" @bind-Value="@PropertyViewModelUser.StreetName" placeholder="@PropertyViewModelUser.StreetName"></InputText>
                                <ValidationMessage For="@(() => PropertyViewModelUser.StreetName)" />
                            </div>
                        </div>


                        <div class="row mb-3 ms-2">
                                <label for="city" class="col-sm-3 form-label">🏢City name:</label>
                            <div class="col-sm-5">
                                <InputText id="city" class="form-control" @bind-Value="@PropertyViewModelUser.City" placeholder="@PropertyViewModelUser.City"></InputText>
                                <ValidationMessage For="@(() => PropertyViewModelUser.City)" />
                            </div>
                        </div>
                        <div class="row mb-3 ms-2">
                                <label for="region" class="col-sm-3 form-label">📍Region name:</label>
                            <div class="col-sm-5">
                                <div class="input-group">
                                    <InputSelect id="region" class="form-control" @bind-Value="@PropertyViewModelUser.Region">
                                        @foreach (var judet in judete)
                                        {
                                            <option value="@judet">@judet</option>
                                        }
                                    </InputSelect>
                                    <span class="input-group-append">
                                        <span class="input-group-text"><i class="bi bi-caret-down-fill"></i></span>
                                    </span>
                                </div>
                                <ValidationMessage For="@(() => PropertyViewModelUser.Region)" />
                            </div>
                        </div>

                        <div class="row mb-3 ms-2">
                                <label for="postalcode" class="col-sm-3 form-label">📮Postal code:</label>
                            <div class="col-sm-5">
                                <InputText id="postalcode" class="form-control" @bind-Value="@PropertyViewModelUser.PostalCode" placeholder="@PropertyViewModelUser.PostalCode"></InputText>
                                <ValidationMessage For="@(() => PropertyViewModelUser.PostalCode)" />
                            </div>
                        </div>

                        <div class="row mb-3 ms-2">
                                <label for="country" class="col-sm-3 form-label">🌎Country :</label>
                            <div class="col-sm-5">
                                <InputText id="country" class="form-control" @bind-Value="@PropertyViewModelUser.Country" placeholder="@PropertyViewModelUser.Country"></InputText>
                                <ValidationMessage For="@(() => PropertyViewModelUser.Country)" />
                            </div>
                        </div>

                        <div class="row mb-3 ms-2">
                                <label for="propertyType" class="col-sm-3 form-label">🏠Property Type :</label>

                            <div class="col-sm-5">
                                <InputSelect id="propertyType" class="form-control" @bind-Value="@PropertyViewModelUser.PropertyType" @oninput="HandlePropertyTypeChange">

                                    @foreach (var propertyType in Enum.GetValues(typeof(PropertyType)))
                                    {
                                        <option value="@propertyType">@propertyType</option>
                                    }
                                </InputSelect>


                                <ValidationMessage For="@(() => PropertyViewModelUser.PropertyType)" />
                            </div>
                        </div>

                        @if (PropertyViewModelUser.PropertyType != PropertyType.Land) //Land doesn't have nr of rooms
                        {
                            <div class="row mb-3 ms-2">
                                    <label for="nrRooms" class="col-sm-3 form-label">🚪Number of rooms :</label>
                                <div class="col-sm-5">
                                    <InputNumber id="nrRooms" class="form-control" @bind-Value="@PropertyViewModelUser.NumberOfRooms" placeholder="@PropertyViewModelUser.NumberOfRooms" />

                                    <ValidationMessage For="@(() => PropertyViewModelUser.NumberOfRooms)" />
                                </div>
                            </div>
                        }
                        @if (PropertyViewModelUser.PropertyType != PropertyType.Land &&
                        PropertyViewModelUser.PropertyType != PropertyType.Garage) //Land and Garage don't have nr of bathrooms
                        {
                            <div class="row mb-3 ms-2">
                                    <label for="nrBathrooms" class="col-sm-3 form-label">🚽Number of Bathrooms :</label>
                                <div class="col-sm-5">
                                    <InputNumber id="nrBathrooms" class="form-control" @bind-Value="@PropertyViewModelUser.NumberOfBathrooms" placeholder="@PropertyViewModelUser.NumberOfBathrooms"></InputNumber>
                                    <ValidationMessage For="@(() => PropertyViewModelUser.NumberOfBathrooms)" />
                                </div>
                            </div>
                        }
                        @if (PropertyViewModelUser.PropertyType == PropertyType.Apartment ||
                        PropertyViewModelUser.PropertyType == PropertyType.Condo ||
                        PropertyViewModelUser.PropertyType == PropertyType.Office)
                        {
                            <div class="row mb-3 ms-2">
                                    <label for="floor" class="col-sm-3 form-label">🪜Number of floor :</label>
                                <div class="col-sm-5">
                                    <InputNumber id="floor" class="form-control" @bind-Value="@PropertyViewModelUser.Floor" placeholder="@PropertyViewModelUser.Floor"></InputNumber>
                                    <ValidationMessage For="@(() => PropertyViewModelUser.Floor)" />
                                </div>
                            </div>
                        }
                        @if (PropertyViewModelUser.PropertyType != PropertyType.Land &&
                        PropertyViewModelUser.PropertyType != PropertyType.Farm &&
                        PropertyViewModelUser.PropertyType != PropertyType.Garage) //Land, Farm and Garage don't have nr of total floors
                        {
                            <div class="row mb-3 ms-2">
                                    <label for="nrfloors" class="col-sm-3 form-label">🪜Number of total floors :</label>
                                <div class="col-sm-5">
                                    <InputNumber id="nrfloors" class="form-control" @bind-Value="@PropertyViewModelUser.NumberOfFloors" placeholder="@PropertyViewModelUser.NumberOfFloors"></InputNumber>
                                    <ValidationMessage For="@(() => PropertyViewModelUser.NumberOfFloors)" />
                                </div>
                            </div>
                        }

                        <div class="row mb-3 ms-2">
                                <label for="squarefeet" class="col-sm-3 form-label">📏Number of squarefeet :</label>
                            <div class="col-sm-5">
                                <InputNumber id="squarefeet" class="form-control" @bind-Value="@PropertyViewModelUser.SquareFeet" placeholder="@PropertyViewModelUser.SquareFeet"></InputNumber>
                                <ValidationMessage For="@(() => PropertyViewModelUser.SquareFeet)" />
                            </div>
                        </div>
                            <div id="map" style="height: 400px; border-radius: 5px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);"></div>

                            <div class="row mb-3 ms-2" style="display: none;">
                                <label for="latitude" class="col-sm-3 form-label">Latitude:</label>
                                <div class="col-sm-5">
                                    <InputText id="latitude" class="form-control" @bind-Value="@PropertyViewModelUser.Latitude" placeholder="@PropertyViewModelUser.Latitude"></InputText>
                                </div>
                            </div>
                            <div class="row mb-3 ms-2" style="display: none;">
                                <label for="longitude" class="col-sm-3 form-label">Longitude:</label>
                                <div class="col-sm-5">
                                    <InputText id="longitude" class="form-control" @bind-Value="@PropertyViewModelUser.Longitude" placeholder="@PropertyViewModelUser.Longitude"></InputText>
                                </div>
                            </div>
                        <div class="row mb-3 ms-2">
                            <button type="submit" class="btn btn-primary save" @onclick="HandleValidSubmit">Update property</button>
                            <button class="btn btn-primary cancel" @onclick="Cancel">Cancel</button>
                        </div>
                    </EditForm>
                    </div>
                    <div class="col-md-6 img-col">
                        <!-- Aici este imaginea -->
                        <img src="/Properties.png" alt="Descriere imagine" class="img-fluid" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>




@code {
    [Parameter]
    public string PropertyId { get; set; }

    [Inject]
    public IPropertyDataService PropertyDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public PropertyViewModelByUser PropertyViewModelUser { get; set; } = new PropertyViewModelByUser();


    public string Message { get; set; }

    private List<string> judete = new List<string>
    {
        "Alba", "Arad", "Bacau", "Bihor", "Bistrita-Nasaud", "Botosani", "Braila", "Brasov", "Buzau", "Bucuresti",
        "Cluj", "Constanta", "Galati", "Giurgiu", "Iasi", "Ilfov", "Maramures", "Mures", "Neamt", "Prahova",
        "Satu Mare", "Sibiu", "Suceava", "Teleorman", "Timis", "Tulcea", "Vrancea"
    };

    protected override async Task OnInitializedAsync()
    {
        Guid guid = Guid.Parse(PropertyId);
        PropertyViewModelUser = await PropertyDataService.GetPropertyByIdAsync(guid);
        Console.WriteLine(PropertyViewModelUser);
    }
}

@functions {
    private void HandlePropertyTypeChange(ChangeEventArgs e)
    {
        PropertyViewModelUser.NumberOfFloors = 0;
        PropertyViewModelUser.NumberOfBathrooms = 0;
        PropertyViewModelUser.NumberOfFloors = 0;
        PropertyViewModelUser.Floor = 0;
        PropertyViewModelUser.NumberOfRooms = 0;
        PropertyViewModelUser.SquareFeet = 0;
    }
    private async Task HandleValidSubmit()
    {
        PropertyViewModelUser.Longitude = await JSRuntime.InvokeAsync<string>("getPropertyValue", "longitude");
        PropertyViewModelUser.Latitude = await JSRuntime.InvokeAsync<string>("getPropertyValue", "latitude");
        Console.WriteLine(PropertyViewModelUser.Longitude);
Console.WriteLine(PropertyViewModelUser.Latitude);
            Message = string.Empty;
            var result = await PropertyDataService.UpdatePropertyAsync(PropertyViewModelUser, PropertyViewModelUser.PropertyId);
            if (result.Success)
            {
                Message = "Property updated successfully";
                StateHasChanged();
                await Task.Delay(2500); //wait for the message to be displayed
                NavigationManager.NavigateTo("/viewproperties");
            }
            else
            {
                for(int i = 0; i < result.ValidationErrors.Count; i++)
                {
                Message += result.ValidationErrors[i] + " ";
                }
            }
    

    }
    private string GetAlertClass()
    {
        if (string.IsNullOrWhiteSpace(Message))
        {
            return "alert alert-info"; // sau o altă clasă pentru alerte informative
        }

        return Message.StartsWith("Property updated successfully") ? "alert alert-success" : "alert alert-danger";
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/viewproperties");
    }

}
