@page "/register"
@using RealEstateListingPlatform.App.Auth
@using RealEstateListingPlatform.App.ViewModels

@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider

<h3>Register</h3>

<EditForm class="form-register" OnValidSubmit="OnSubmit" Model="registerRequest">
    <DataAnnotationsValidator />

    <label for="inputName" class="sr-only">Name</label>
    <InputText id="inputName" class="form-control" placeholder="Name" @bind-Value="registerRequest.Name" />
    <ValidationMessage For="@(() => registerRequest.Name)" />

    <label for="inputUsername" class="sr-only">Username</label>
    <InputText id="inputUsername" class="form-control" @bind-Value="registerRequest.Username" autofocus placeholder="Username" />
    <ValidationMessage For="@(() => registerRequest.Username)" />

    <label for="inputPassword" class="sr-only">Password</label>
    <InputText type="password" id="inputPassword" class="form-control" placeholder="Password" @bind-Value="registerRequest.Password" />
    <ValidationMessage For="@(() => registerRequest.Password)" />

    <label for="inputEmail" class="sr-only">Email</label>
    <InputText type="email" id="inputEmail" class="form-control" placeholder="Email" @bind-Value="registerRequest.Email" />
    <ValidationMessage For="@(() => registerRequest.Email)" />

    <label for="inputPhoneNumber" class="sr-only">Phone Number</label>
    <InputText type="tel" id="inputPhoneNumber" class="form-control" placeholder="PhoneNumber" @bind-Value="registerRequest.PhoneNumber" />
    <ValidationMessage For="@(() => registerRequest.PhoneNumber)" />



    <br />

    <button class="btn btn-lg btn-primary btn-block" type="submit" > Create Account</button>
    <button class="btn btn-primary" type="button" @onclick="Cancel"> Cancel </button>

    <label class="text-danger">@error</label>

</EditForm>


@code {
    RegisterViewModel registerRequest { get; set; } = new RegisterViewModel();
    string error { get; set; }

    async Task OnSubmit()
    {
        error = null;
        try
        {
            await authStateProvider.Register(registerRequest);
            navigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    void Cancel()
	{
		navigationManager.NavigateTo("/login");
	}


}

