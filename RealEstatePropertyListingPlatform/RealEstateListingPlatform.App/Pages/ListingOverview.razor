@page "/listingoverview"
@using RealEstateListingPlatform.App.Contracts
@using RealEstateListingPlatform.App.Services.Responses
@using RealEstateListingPlatform.App.ViewModels
@using RealEstatePropertyListingPlatform.Domain.Enums
<head>
    <link href="css/app.css"/>
    <link href="/css/filter.css" rel="stylesheet"/>
    <link href="/css/editproperty.css" rel="stylesheet" />
</head>


<div class="title-container">
    <h3 class="mb-4 text-center">🏷️Listing Overview</h3>
</div>

@if (listingsResponse?.Success == true)
{
    <button class="setting-btn" @onclick="ShowFilterModal">
        <span class="bar bar1"></span>
        <span class="bar bar2"></span>
        <span class="bar bar1"></span>
    </button>

    <div class="modal" tabindex="-1" style="@modalStyle">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Filter Listings</h5>
                    <button type="button" class="btn-close" @onclick="HideFilterModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@FilterModel">
                        <DataAnnotationsValidator />
                        <!-- Choose Property Type -->
                        <div class="mb-3">
                            <label for="propertyType" class="form-label">Choose Property Type:</label>
                            <InputSelect id="propertyType" class="form-select" @bind-Value="FilterModel.PropertyType">
                                <option value="-1">Any</option>
                                @foreach (var propertyType in Enum.GetValues(typeof(PropertyType)))
                                { // in value= is put the number of the enum
                                    <option value="@((int)propertyType)">@propertyType</option>
                                }
                            </InputSelect>
                        </div>

                        <!-- Choose Currency -->
                        <div class="mb-3">
                            <label for="currency" class="form-label">Choose Currency:</label>
                            <InputSelect id="currency" class="form-select" @bind-Value="FilterModel.PriceCurrency">
                                @foreach (var currency in Enum.GetValues(typeof(Currency)))
                                {
                                    <option value="@currency">@currency</option>
                                }
                            </InputSelect>
                        </div>

                        <!-- Choose Price Range -->
                        <div class="mb-3">
                            <label for="priceRange" class="form-label">Choose Price Range:</label>
                            <div class="input-group">
                                <InputNumber id="minPrice" class="form-control" placeholder="Min Price" min="0" step="50.50" @bind-Value="FilterModel.PriceLowerBound" />
                                <span class="input-group-text">to</span>
                                <InputNumber id="maxPrice" class="form-control" placeholder="Max Price" min="0" step="50.50" @bind-Value="FilterModel.PriceUpperBound" />
                            </div>
                        </div>

                        <!-- Insert City -->
                        <div class="mb-3">
                            <label for="city">Insert City:</label>
                            <InputText id="city" class="form-control" placeholder="City (max 100 characters)" style="width: 100%;" @bind-Value="FilterModel.City" />
                        </div>

                        <!-- Choose Region -->
                        <div class="mb-3">
                            <label for="region" class="form-label">Choose Region:</label>
                            <InputSelect id="region" class="form-select" @bind-Value="FilterModel.Region">
                                <option value="">Any</option>
                                @foreach (var judet in judete)
                                {
                                    <option value="@judet">@judet</option>
                                }
                            </InputSelect>
                        </div>

                        <!-- Choose Square Feet -->
                        <div class="mb-3">
                            <label for="squareFeet" class="form-label">Choose Square Feet:</label>
                            <div class="input-group">
                                <InputNumber id="minSquareFeet" class="form-control" placeholder="Min Sq. Feet" min="0" step="10" @bind-Value="FilterModel.SquareFeetLowerBound" />
                                <span class="input-group-text">to</span>
                                <InputNumber id="maxSquareFeet" class="form-control" placeholder="Max Sq. Feet" min="0" step="10" @bind-Value="FilterModel.SquareFeetUpperBound" />
                            </div>
                        </div>

                        <!-- Listing Type -->
                        <div class="mb-3">
                            <label for="listingType" class="form-label">Listing Type:</label>
                            <InputSelect id="listingType" class="form-select" @bind-Value="forRent">
                                <option value="-1">Any</option>
                                <option value="1">Rent</option>
                                <option value="0">Sale</option>
                            </InputSelect>
                        </div>

                        <!-- Title -->
                        <div class="mb-3">
                            <label for="listingTitle" class="form-label">Listing Title:</label>
                            <InputText id="listingTitle" class="form-control" placeholder="Enter listing title" style="width: 100%;" @bind-Value="FilterModel.ContainsInTitle" />
                        </div>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideFilterModal">Close</button>
                    <div class="box" @onclick="ApplyFilters">
                        <div class="arrow right"></div>
                        <div class="text">Apply Filters</div>
                    </div>
                </div>

            </div>
        </div>
    </div>

    @if (listingsResponse.TotalCount == 0)
    {
        <div class="alert alert-warning" role="alert">
            No listings available for your search.
        </div>
    }
    else if (listingsResponse.Listings.Any())
    {
        <div class="container @((isFilterModalVisible ? "blur-background" : ""))">
            <div class="row">
            @foreach (var listing in listingsResponse.Listings)
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card h-100 shadow-sm selectable-card" @onclick="() => OnListingClick(listing.ListingId)">
                        @if (listing.Photos.Any())
                        {
                            <img src="@listing.Photos.FirstOrDefault()" class="card-img-top" alt="Listing Image" style="height: 200px; object-fit: cover;">
                        }
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@listing.Title</h5>
                            <p class="card-text text-secondary">@TruncateDescription(listing.Description, 50)</p>
                            <p class="card-text mt-auto">
                                <span class="text-dark">@listing.Price.Value @listing.Price.Currency</span>
                                <span class="badge @(listing.Negotiable ? "bg-success" : "bg-danger")">@("Negotiable")</span>
                                <span class="badge @(listing.IsRent ? "bg-success" : "bg-info")">@(listing.IsRent ? "Rent" : "Sale")</span>
                            </p>
                        </div>

                        <div class="card-footer">
                        <small class="text-muted">Updated @listing.DateUpdated.ToString("yyyy-MM-dd HH:mm")</small>
                        </div>
                    </div>
                </div>
            }
            </div>
            <Pager TotalCount="@listingsResponse.TotalCount" PageSize="pageSize" OnPage="LoadPage" />
        </div>
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center">
                @for (int i = 1; i <= TotalPages(); i++)
                {
                    var pageNr = i;
                    <li class="page-item @(pageNr == currentPage ? "active" : "")">
                        <button class="page-link" @onclick="() => LoadPage(pageNr)">@pageNr</button>
                    </li>
                }
            </ul>
        </nav>
    }
    
}
else
{
    @* <div class="alert alert-warning" role="alert"> *@
    @*     No listings available. *@
    @* </div> *@
    <HxSpinner Color="ThemeColor.Primary" />
}
@code {

    [Inject]
    public IListingDataService ListingDataService { get; set; }

    [Inject]
    public required NavigationManager NavigationManager { get; set; }

    [Parameter]
    public ApiResponseListing listingsResponse { get; set; }


    private int currentPage = 1;
    private int pageSize = 2; // Set your default page size

    private bool filterWasApplied = false;

    [Parameter]
    public EventCallback<string> OnListingSelected { get; set; }

    string error { get; set; }

    private List<string> judete = new List<string>
    {
        "Alba", "Arad", "Bacau", "Bihor", "Bistrita-Nasaud", "Botosani", "Braila", "Brasov", "Buzau", "Bucuresti",
        "Cluj", "Constanta", "Galati", "Giurgiu", "Iasi", "Ilfov", "Maramures", "Mures", "Neamt", "Prahova",
        "Satu Mare", "Sibiu", "Suceava", "Teleorman", "Timis", "Tulcea", "Vrancea"
    };

    private FilterViewModel FilterModel = new FilterViewModel();

    int forRent = -1;

    private int TotalPages() => (int)Math.Ceiling((double)listingsResponse.TotalCount / pageSize);

    private bool isFilterModalVisible = false;

    private string modalStyle => isFilterModalVisible ? "display: block;" : "display: none;";

    private async void ApplyFilters()
    {   

        FilterModel.PageNumber = 1;
        FilterModel.PageSize = pageSize;
        currentPage = 1;

        if (!filterWasApplied)
        {
            filterWasApplied = true;
        }

        Tuple<decimal?, decimal?, int?, int?> beforeAdjustFilterValues = adjustFilterModel();

        HideFilterModal();

        listingsResponse = await ListingDataService.GetFilteredPagedListingsAsync(FilterModel);

        StateHasChanged();

        FilterModel.PriceLowerBound = beforeAdjustFilterValues.Item1;
        FilterModel.PriceUpperBound = beforeAdjustFilterValues.Item2;
        FilterModel.SquareFeetLowerBound = beforeAdjustFilterValues.Item3;
        FilterModel.SquareFeetUpperBound = beforeAdjustFilterValues.Item4;

    }
    private Tuple<decimal?, decimal?, int?, int?> adjustFilterModel()
    {
        decimal? oldPriceLoweBound = FilterModel.PriceLowerBound;
        decimal? oldPriceUpperBound = FilterModel.PriceUpperBound;
        int? squareFeetLowerBound = FilterModel.SquareFeetLowerBound;
        int? squareFeetUpperBound = FilterModel.SquareFeetUpperBound;

        if (forRent == -1)
        {
            FilterModel.ForRent = null;
        }
        else
        {

            FilterModel.ForRent = (forRent == 1);

        }
        if (FilterModel.PriceLowerBound == null)
        {
            FilterModel.PriceLowerBound = 0;
        }
        if (FilterModel.PriceUpperBound == null)
        {
            FilterModel.PriceUpperBound = 0;
        }
        if (FilterModel.SquareFeetLowerBound == null)
        {
            FilterModel.SquareFeetLowerBound = 0;
        }
        if (FilterModel.SquareFeetUpperBound == null)
        {
            FilterModel.SquareFeetUpperBound = 0;
        }

        return new Tuple<decimal?, decimal?, int?, int?>(oldPriceLoweBound, oldPriceUpperBound, squareFeetLowerBound, squareFeetUpperBound);
        
    }

    private async void getFilteredPage(int pageNumber)
    {
        FilterModel.PageNumber = pageNumber;
        FilterModel.PageSize = pageSize;

        Tuple<decimal?, decimal?, int?, int?> beforeAdjustFilterValues = adjustFilterModel();


        listingsResponse = await ListingDataService.GetFilteredPagedListingsAsync(FilterModel);

        StateHasChanged();

        FilterModel.PriceLowerBound = beforeAdjustFilterValues.Item1;
        FilterModel.PriceUpperBound = beforeAdjustFilterValues.Item2;
        FilterModel.SquareFeetLowerBound = beforeAdjustFilterValues.Item3;
        FilterModel.SquareFeetUpperBound = beforeAdjustFilterValues.Item4;
    }

    private void resetFilterModel(FilterViewModel FilterModel)
    {
        FilterModel.PageNumber = currentPage;
        FilterModel.PageSize = pageSize;

        FilterModel.PriceLowerBound = null;
        FilterModel.PriceUpperBound = null;
        FilterModel.PriceCurrency = 0;

        FilterModel.City = null;
        FilterModel.Region = null;
        FilterModel.PropertyType = -1;
        FilterModel.SquareFeetLowerBound = null;
        FilterModel.SquareFeetUpperBound = null;
        forRent = -1;
        FilterModel.ContainsInTitle = null;

    }

    private void ShowFilterModal()
    {
        if (!filterWasApplied)
        {
            resetFilterModel(FilterModel);
        }
        
        isFilterModalVisible = true;
    }

    private void HideFilterModal()
    {
        isFilterModalVisible = false;
    }

    private void OnListingClick(string listingId)
    {
        OnListingSelected.InvokeAsync(listingId);
        ViewListing(listingId);
    }

    private async Task LoadPage(int pageNumber)
    {
        Console.WriteLine("Loading page {pageNumber}");
        // should check if it was not applied a filtered search
        // and everytime a filtered search is made -> keep the filter model in another variable and
        // reset the filter model
        currentPage = pageNumber;
        try
        {
            if (filterWasApplied)
			{
				getFilteredPage(pageNumber);
			}
			else
			{
				listingsResponse = await ListingDataService.GetPagedListingsAsync(pageNumber, pageSize);
			}
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadPage(currentPage);
    }
    private string TruncateDescription(string description, int maxLength)
    {
        if (string.IsNullOrEmpty(description)) return description;
        return description.Length <= maxLength ? description : description.Substring(0, maxLength) + "...";
    }

    private void ViewListing(string listing)
    {
        NavigationManager.NavigateTo($"/viewlisting/{listing}");
    }

}