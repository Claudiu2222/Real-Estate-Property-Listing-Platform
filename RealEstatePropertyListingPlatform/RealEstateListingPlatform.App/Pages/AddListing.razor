@page "/addlisting/{PropertyId}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using RealEstateListingPlatform.App.Contracts
@using RealEstateListingPlatform.App.ViewModels
@using RealEstatePropertyListingPlatform.Domain.Enums
@using System.Net
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient Http
@attribute [Authorize(Roles = "User")]
<head>
    <link href="css/app.css" rel="stylesheet" />
    <link href="css/addlisting.css" rel="stylesheet" />
    <style>
        body {
            background: linear-gradient(to right, #6a11cb 0%, #2575fc 100%) !important;
        }

    </style>
</head>
<div class="title-container">
    <h3 class="mb-4 text-center">‚ûïAdd listing</h3>
</div>

<div class="@GetAlertClass() mb-3 ms-2" style="display: @(string.IsNullOrWhiteSpace(Message) ? "none" : "block");">
    <div class="d-flex align-items-center">
        <div class="me-2">
            <svg id="checkmark" xmlns="http://www.w3.org/2000/svg" style="width: 24px; height: 24px; transform-origin: center; transition: transform 0.3s ease-in-out;" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                <polyline points="22 4 12 14.01 9 11.01"></polyline>
            </svg>
        </div>
        <div>@Message</div>
    </div>
</div>

<div class="container">
    <div class="row justify-content-center">
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                    <EditForm Model="@ListingViewModel" OnValidSubmit="@HandleValidSubmit">

                        <DataAnnotationsValidator />

                         <div class="row mb-3 ms-2">
                                <label for="streetname" class="col-sm-3 form-label">üîñTitle:</label>
                            <div class="col-sm-5">
                                <InputText id="title" class="form-control" @bind-Value="@ListingViewModel.Title" placeholder="Enter title"></InputText>
                                <ValidationMessage For="@(() => ListingViewModel.Title)" />
                            </div>
                        </div>

                        <div class="row mb-3 ms-2">
                                <label for="price" class="col-sm-3 form-label">üí≤Price:</label>
                            <div class="col-sm-5">
            
                                <InputNumber id="price" class="form-control" @bind-Value="@Price.Value"></InputNumber>
                                <!-- Input pentru valoarea numericƒÉ -->
                                <InputSelect id="price-currency" class="form-control" @bind-Value="@Price.Currency">

                                    @foreach (var currency in Enum.GetValues(typeof(Currency)))
                                    {
                                        <option value="@currency">@currency</option>
                                    })

                                </InputSelect>
                                <ValidationMessage For="@(() => Price.Value)" />
                                <ValidationMessage For="@(() => Price.Currency)" />
                                <p class="form-text">Consider the market trends and the unique features of your property. Accurate pricing is key to attracting potential buyers and maximizing the value of your listing. We recomment you to use our price prediction tool.</p>
                                <!-- Buton pentru a face predic»õia -->
                                <button type="button" class="btn btn-primary mt-2" @onclick="PredictPrice" disabled="@isPredicting">
                                    <span style="display: @(isPredicting ? "inline-block" : "none")" class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span style="display: @(isPredicting ? "none" : "inline-block")">Predict Price</span>
                                </button>

                                @if(predictedPrice != 0)
                                {
                                    @if(predictedPrice == -1)
                                    {
                                        <div class="mt-2">
                                            <strong>Predicted Price:</strong> Could not predict price
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="mt-2">
                                           @if(Price.Currency == Currency.USD)
                                           {
                                                <p><strong>Predicted Price:</strong> @predictedPriceUSD @Price.Currency</p>
                                           }
                                           else if(Price.Currency == Currency.RON)
                                           {
                                                <p><strong>Predicted Price:</strong> @predictedPriceRON  @Price.Currency</p>
                                           }
                                           else
                                           {
                                                <p><strong>Predicted Price:</strong> @predictedPrice  @Price.Currency</p>
                                           }
                                        </div>
                                    }
                                }
                            </div>
                        </div>

  
    <div class="row mb-3 ms-2">
                        <label for="photos" class="col-sm-3 form-label">üì∏Photos:</label>
        <div class="col-sm-5">
            <InputFile class="choosefile" OnChange="HandleFileSelected" multiple  />
            @if (uploadedImageUrls.Any())
            {
                <div>
                    <p class="uplloadedimages">Uploaded images:</p>
                    <ul>
                        @foreach (var imageUrl in uploadedImageUrls)
                        {
                            <li><img src="@imageUrl" style="width:100px; height:100px;" /></li>
                        }
                    </ul>
                </div>
            }
        </div>
    </div>
                        <div class="row mb-3 ms-2">
                                <label for="description" class="col-sm-3 form-label">üìùDescription:</label>
                                <div class="col-sm-5">
                                    <InputTextArea id="description" class="form-control" @bind-Value="@ListingViewModel.Description" placeholder="Enter description"></InputTextArea>
                                    <ValidationMessage For="@(() => ListingViewModel.Description)" />
                                </div>

                        </div>
                      

                        <div class="row mb-3 ms-2">
                                <label for="negotiable" class="col-sm-3 form-label">ü§ùüèªNegotiable:</label>
                            <div class="col-sm-5">
                                <div class="form-check">
                                    <InputCheckbox id="negotiable" class="form-check-input" @bind-Value="@ListingViewModel.Negotiable"></InputCheckbox>
                                    <label class="form-check-label" for="negotiable">Negotiable</label>
                                </div>
                                <ValidationMessage For="@(() => ListingViewModel.Negotiable)" />
                            </div>
                        </div>




                        <div class="row mb-3 ms-2">
                            <button type="submit" class="btn btn-primary save">Save listing</button>
                            <button class="btn btn-primary cancel" @onclick="Cancel">Cancel</button>
                        </div>
                    </EditForm>
                    </div>
                    <div class="col-md-6 img-col">
                        <!-- Aici este imaginea -->
                        <img src="/updateproperty.png" alt="Descriere imagine" class="img-fluid" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public string PropertyId { get; set; }

    [Inject]
    public IListingDataService ListingDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public PriceViewModel Price { get; set; } = new();
    [Inject]
    public IPropertyDataService PropertyDataService { get; set; }

    [Inject]
    public IPredictPriceService PredictPriceService { get; set; }
    [Inject]
    public ICurrencyConverterService currencyConverterService { get; set; }
    public PropertyViewModelByUser propertyViewModelByUser { get; set; } = new();

    public PredictPriceViewModel predictPriceViewModel { get; set; } = new();

    public ListingViewModelCreate ListingViewModel { get; set; } = new();

    public string Message { get; set; }

    private bool showMessage = true; // Folosit pentru a arƒÉta sau ascunde div-ul

    private System.Threading.Timer _timer;
    private bool IsPropertyTypeApartment = false;
    private List<string> judete = new List<string>
    {
        "Alba", "Arad", "Bacau", "Bihor", "Bistrita-Nasaud", "Botosani", "Braila", "Brasov", "Buzau", "Bucuresti",
        "Cluj", "Constanta", "Galati", "Giurgiu", "Iasi", "Ilfov", "Maramures", "Mures", "Neamt", "Prahova",
        "Satu Mare", "Sibiu", "Suceava", "Teleorman", "Timis", "Tulcea", "Vrancea"
    };

    private int maxFileSize = 1024 * 1024 * 10; //10mb
    private string bucket_url = "https://firebasestorage.googleapis.com/v0/b/dot-net-test-20d14.appspot.com";


    List<string> uploadedImageUrls = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Guid guid = Guid.Parse(PropertyId);
            propertyViewModelByUser = await PropertyDataService.GetPropertyByIdAsync(guid);

            if(propertyViewModelByUser.PropertyType == PropertyType.Apartment)
            {
                IsPropertyTypeApartment = true;
            }

            Price.Currency = Currency.USD;

        }
        catch (Exception ex)
        {
            Message = ex.Message;
        }
    }
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {

            var filename = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
            var response = await Http.GetFromJsonAsync<UrlResponse>($"api/Upload/generate-upload-url?filePath={filename}");
            if (response != null)
            {
                var preSignedUrl = response.Url;
                using var content = new StreamContent(file.OpenReadStream(maxFileSize));
                var uploadResponse = await Http.PutAsync(preSignedUrl, content);
                if (uploadResponse.IsSuccessStatusCode)
                {
                    var imageUrl = $"{bucket_url}/o/{Uri.EscapeDataString(filename)}?alt=media";
                    uploadedImageUrls.Add(imageUrl);
                    System.Diagnostics.Debug.WriteLine(imageUrl);
                }

            }
        }
    }



    private async Task HandleValidSubmit()
    {
        ListingViewModel.PropertyId = PropertyId;
        ListingViewModel.Price = Price;
        ListingViewModel.Photos = uploadedImageUrls;

        var result = await ListingDataService.CreateListingAsync(ListingViewModel);
        if (result.Success)
        {
            Message = "Property created successfully";
            _timer = new System.Threading.Timer(
            async (state) =>
            {
                NavigationManager.NavigateTo("/viewmylistings");
                await Task.CompletedTask;
            },
            null,
            1000,
            System.Threading.Timeout.Infinite
        );
        }
        else
        {
            for (int i = 0; i < result.ValidationErrors.Count; i++)
            {
                Message += result.ValidationErrors[i] + " ";
            }
        }
    }
    private string GetAlertClass()
    {
        Console.WriteLine(Message);
        if (string.IsNullOrWhiteSpace(Message))
        {
            return "alert alert-info"; // sau o altƒÉ clasƒÉ pentru alerte informative
        }

        return Message.StartsWith("Property created successfully") ? "alert alert-success" : "alert alert-danger";
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/viewmylistings");
    }

    public class UrlResponse
    {
        public string Url { get; set; }
    }
    private float predictedPrice;

    private double predictedPriceUSD;

    private double predictedPriceRON;

    private bool isPredicting;

    private async Task PredictPrice()
    {
        try
        {
            isPredicting = true;

            int cityIndex = judete.IndexOf(propertyViewModelByUser.City);

            predictPriceViewModel.Suprafata = propertyViewModelByUser.SquareFeet;
            predictPriceViewModel.Nr_Camere = propertyViewModelByUser.NumberOfRooms;
            predictPriceViewModel.Etaj = propertyViewModelByUser.Floor;
            predictPriceViewModel.Total_Etaje = propertyViewModelByUser.NumberOfFloors;
            predictPriceViewModel.City = cityIndex;
            predictPriceViewModel.Pret = 0;

            var result = await PredictPriceService.PredictPriceAsync(predictPriceViewModel);

            if (result.Success)
            {
                predictedPrice = result.predictedPrice;

                int auxPredictedPrice = (int)predictedPrice / 100;

                predictedPrice = auxPredictedPrice * 100;

                var convertedPriceUSD = await currencyConverterService.ConvertToUSD(predictedPrice);

                var convertedPriceRON = await currencyConverterService.ConvertToRON(predictedPrice);

                predictedPriceUSD = (int) convertedPriceUSD / 100;
                predictedPriceRON = (int) convertedPriceRON / 100;

                predictedPriceUSD = predictedPriceUSD * 100;
                predictedPriceRON = predictedPriceRON * 100;

            }
            else
            {
                predictedPrice = -1;
            }
        }
        finally
        {
            isPredicting = false;
        }
    }
}

