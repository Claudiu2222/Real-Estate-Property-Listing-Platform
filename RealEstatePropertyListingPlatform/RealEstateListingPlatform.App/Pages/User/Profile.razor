@page "/profile"
@using RealEstateListingPlatform.App.Contracts
@using RealEstateListingPlatform.App.ViewModels.UserModels

<h3 class="mb-4">My Profile</h3>
<head>
<link href="css/profile.css" rel="stylesheet" />
</head>
<div class="@GetAlertClass() mb-3 ms-2" style="display: @(string.IsNullOrWhiteSpace(Message) ? "none" : "block");">
    <div class="d-flex align-items-center">
        <div class="me-2">
            <svg id="checkmark" xmlns="http://www.w3.org/2000/svg" style="width: 24px; height: 24px; transform-origin: center; transition: transform 0.3s ease-in-out;" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                <polyline points="22 4 12 14.01 9 11.01"></polyline>
            </svg>
        </div>
        <div>@Message</div>
    </div>
</div>

@if (userViewModel != null)
{
    <div class="row">
        <div class="col-lg-4">
            <div class="card mb-4">
                <div class="card-body text-center">
                    <img src="https://static.vecteezy.com/system/resources/previews/005/129/844/non_2x/profile-user-icon-isolated-on-white-background-eps10-free-vector.jpg" alt="avatar"
                         class="rounded-circle img-fluid" style="width: 150px;">
                    <h5 class="my-3">@userViewModel.Name</h5>
                    <p class="text-muted mb-1">@userViewModel.Username</p>
                    <div class="d-flex justify-content-center mb-2">
                        <button @onclick="EditUserInfo" class="button-edit">
                            <svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1.5">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                <path stroke-linecap="round" stroke-linejoin="round" d="M19.553 21.281l-1.834-1.833" />
                                <path stroke-linecap="round" stroke-linejoin="round" d="M18.719 16.594l-1.833-1.833" />
                                <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6.5l-8 8" />
                            </svg>
                        </button>
                        <button class="button-delete">
                            <svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1.5">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-8">
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="card-title">User Information</h5>

                    @if (!editMode)
                    {
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item"><strong>👤 Username:</strong> <span class="text-muted mb-0">@userViewModel.Username</span></li>
                            <li class="list-group-item"><strong>👤 Name:</strong> <span class="text-muted mb-0">@userViewModel.Name</span></li>
                            <li class="list-group-item"><strong>📞 Phone Number:</strong> <span class="text-muted mb-0">@userViewModel.PhoneNumber</span></li>
                            <li class="list-group-item"><strong>📧 Email:</strong> <span class="text-muted mb-0">@userViewModel.Email</span></li>
                        </ul>

                        
                    }
                    else
                    {

                        <EditForm Model="@editedUser" OnValidSubmit="@SaveChanges">

                            <DataAnnotationsValidator />
                            <ValidationSummary></ValidationSummary>


                            <div class="row mb-3 ms-2">
                                <label for="username" class="col-sm-3 form-label">👤 Username:</label>
                                <div class="col-sm-5">
                                    <InputText id="username" class="form-control" @bind-Value="@editedUser.Username"></InputText>
                                    <ValidationMessage For="@(() => editedUser.Username)" />
                                </div>
                            </div>

                            <div class="row mb-3 ms-2">
                                <label for="name" class="col-sm-3 form-label">👤 Name:</label>
                                <div class="col-sm-5">
                                    <InputText id="name" class="form-control" @bind-Value="@editedUser.Name"></InputText>
                                    <ValidationMessage For="@(() => editedUser.Name)" />
                                </div>
                            </div>

                            <div class="row mb-3 ms-2">
                                <label for="phoneNumber" class="col-sm-3 form-label">📞 Phone Number:</label>
                                <div class="col-sm-5">
                                    <InputText id="phoneNumber" class="form-control" @bind-Value="@editedUser.PhoneNumber"></InputText>
                                    <ValidationMessage For="@(() => editedUser.PhoneNumber)" />
                                </div>
                            </div>

                            <div class="row mb-3 ms-2">
                                <label for="email" class="col-sm-3 form-label">📧 Email:</label>
                                <div class="col-sm-5">
                                    <InputText id="email" class="form-control" @bind-Value="@editedUser.Email"></InputText>
                                    <ValidationMessage For="@(() => editedUser.Email)" />
                                </div>
                            </div>

                            <button type="submit" class="save-button">Save Changes</button>
                            <button class="cancel-button" @onclick="CancelEdit">Cancel</button>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>



}
else
{
    <p>Loading user details...</p>
}

@code {
    [Inject]
    public IUserService userService { get; set; }

    private UserInfoViewModel? userViewModel;
    private UserInfoViewModel? editedUser;
    private bool editMode = false;

    public string Message { get; set; } = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        var response = await userService.GetInfoCurrentUser();

        if (response.IsSuccess)
        {
            userViewModel = response.Data;
            // Create a copy of the userViewModel for editing
            editedUser = new UserInfoViewModel
                {   Id = userViewModel.Id,
                    Username = userViewModel.Username,
                    Name = userViewModel.Name,
                    Email = userViewModel.Email,
                    PhoneNumber = userViewModel.PhoneNumber
                };
        }
    }

    private void EditUserInfo()
    {
        // Set editMode to true to switch to edit mode
        editMode = true;
    }

    private async void SaveChanges()
    {
        Message = string.Empty;
        var response = await userService.Update(editedUser);

        if(response.IsSuccess)
        {
            Message = "Profile updated successfully";

            userViewModel = editedUser;
        }
        else
        {
            Message = response.Message;
            if (!string.IsNullOrWhiteSpace(response.ValidationErrors))
            {
                Message += response.ValidationErrors;
            }
        }
        editMode = false;
        StateHasChanged();
    }

    private void CancelEdit()
    {
        Message = string.Empty;
        editMode = false;
    }

    private string GetAlertClass()
    {
        if (string.IsNullOrWhiteSpace(Message))
        {
            return "alert alert-info";
        }

        return Message.StartsWith("Profile updated successfully") ? "alert alert-success" : "alert alert-danger";
    }
}
