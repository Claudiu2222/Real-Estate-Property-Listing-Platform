@page "/changepassword"
@using RealEstateListingPlatform.App.Contracts
@using RealEstateListingPlatform.App.Services
@using RealEstateListingPlatform.App.ViewModels
@inject IJSRuntime JSRuntime
<head>
    <link href="/css/changepassword.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8sh+Wy6YO2BfEZk3uqGw2D78Wcd4uhufnNl5c2" crossorigin="anonymous">
    <style>
        body::before {
            background: linear-gradient(to right, #354ea0 0%, #4c31be 100%) !important;
    </style>
</head>
<div class="container">
    <div class="row justify-content-center">
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <!-- Adaugă aici imaginea -->
                        <img src="/resetpassword.png" alt="Imagine" class="img-fluid" />
                    </div>
            <h3 class="mb-4">Change password</h3>

            @if (step == 1)
            {

                <div class="mb-3">
                    <label for="username" class="form-label">Introduce your email for reset password:</label>
                    <input type="text" class="form-control" id="email" @bind="email" />
                </div>
                @if (!isValidEmail)
                {
                    <div class="alert alert-danger" role="alert">
                        Invalid email address!
                    </div>
                }
                <button class="btn btn-primary" @onclick="TrimiteCod">Send code</button>
            }

            @if (step == 2)
            {
                <div class="alert alert-success" role="alert">
                      Code was sent to your email! Please check your email. Check also the spam folder.
                </div>
                <div class="mb-3">
                    <label for="cod" class="form-label">Introduce your code:</label>
                    <input type="text" class="form-control" id="cod" @bind="cod" />
                </div>
                @if (!validCode)
                {
                    <div class="alert alert-danger" role="alert">
                            Invalid code!
                    </div>
                }
                @*Resend code button, and is active after every 60 sec*@
                <div class="buttons-div">
                     <button class="btn btn-primary step2" @onclick="VerificaCod">Verify code</button>
                     <button class="btn btn-primary step2" @onclick="@(() => ResendCode())" disabled="@resendDisabled">Resend code @(secondsRemaining == 60 || secondsRemaining == 0 ? "" : secondsRemaining.ToString())</button>
                </div>


            }

            @if (step == 3)
            {
                @if(!matchPassword)
                {
                    <div class="alert alert-danger" role="alert">
                        Passwords do not match!
                    </div>
                }
                @if(isPasswordChanged)
                {
                    <div class="alert alert-success" role="alert">
                        Password changed successfully!
                    </div>
                }
                else
                {
                    @if(!error){
                        <div class="alert alert-success" role="alert">
                            Your password must contain at least 8 characters, one uppercase letter, one lowercase letter, one number and one special character.
                        </div>
                    }
                    else{
                        <div class="alert alert-danger buzz" role="alert">
                            Your password must contain at least 8 characters, one uppercase letter, one lowercase letter, one number and one special character.
                        </div>
                    }
                }
                <div class="mb-3">
                    <label for="parolaNoua" class="form-label">Introduce your new password:</label>
                    <input type="password" class="form-control" id="parolaNoua" @bind="parolaNoua" />
                </div>
                <div class="mb-3">
                    <label for="confirmareParola" class="form-label">Confirm your new password:</label>
                    <input type="password" class="form-control" id="confirmareParola" @bind="confirmareParola" />
                </div>
                <button class="btn btn-primary" @onclick="SchimbaParola">Change Password</button>
            }
        </div>
        
    </div>
    </div>
    </div>
</div>

@code {
    [Inject] public required ISendMailService SendMailService { get; set; }

    [Inject] public required IChangePasswordService ChangePasswordService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public required IValidationCodeService ValidationCodeService { get; set; }

    private int step = 1;
    private string email = "";
    private string cod = "";
    private string parolaNoua = "";
    private string confirmareParola = "";
    bool isValidEmail = true;
    bool validCode = true;
    bool matchPassword = true;
    bool isPasswordChanged = false;
    bool error = false;

    ChangePasswordNoConnectionViewModel model { get; set; } = new ChangePasswordNoConnectionViewModel();

    IsValidMailViewModel isValidMailViewModel { get; set; } = new IsValidMailViewModel();

    ValidationCodeViewModel validationCodeViewModel { get; set; } = new ValidationCodeViewModel();

    ValidateValidationCodeViewModel validateValidationCodeViewModel { get; set; } = new ValidateValidationCodeViewModel();

    private bool resendDisabled = false;
    private int secondsRemaining = 60;  


    private async Task ResendCode()
    {
        resendDisabled = true;
        TrimiteCod();
        secondsRemaining = 60;
        while (secondsRemaining > 0)
        {
            await Task.Delay(1000);
            secondsRemaining--;
            StateHasChanged(); // Notifică componenta că trebuie să-și reafirme starea
        }
        resendDisabled = false;
        StateHasChanged(); // Notifică din nou pentru a actualiza starea butonului
    }


    private async Task TrimiteCod()
    {
        isValidMailViewModel.Email = email;
        var result = await ChangePasswordService.IsValidMail(isValidMailViewModel);

        var code = "";
        if (result.isSuccess)
        {
            Console.WriteLine("Email valid");
            validationCodeViewModel.Email = email;
            Console.WriteLine("Email: " + validationCodeViewModel.Email);
            Console.WriteLine(validationCodeViewModel.Email);

            var resultSendValidationCode = await ValidationCodeService.SendValidationCodeAsync(validationCodeViewModel);

            if (resultSendValidationCode.isSuccess)
            {
                code = resultSendValidationCode.Message;

                var mail = new SendMailViewModel
                    {
                        To = email,
                        ReplyTo = "noreply@example.com",
                        Subject = "Verification code",
                        Body = $"Your verification code is {code}"
                    };

                isValidEmail = true;
                var result2 = await SendMailService.SendMailAsync(mail);

                if (result2.isSuccess)
                {
                    Console.WriteLine("Mail sent successfully");
                    step = 2;
                }
                else
                {
                    Console.WriteLine("Mail not sent");
                    isValidEmail = false;
                }
            }
            else
            {
                Console.WriteLine("The code was not sent");
            }
        }
        else
        {
            Console.WriteLine("Email invalid");
            isValidEmail = false;
        }
    }

    private async Task VerificaCod()
    {
        validateValidationCodeViewModel.Email = email;
        validateValidationCodeViewModel.Code = cod;

        var result = await ValidationCodeService.ValidateValidationCodeAsync(validateValidationCodeViewModel);

        if (result.isSuccess)
        {
            Console.WriteLine("Cod valid");
            validCode = true;
            await ValidationCodeService.DeleteValidationCodeAsync(validationCodeViewModel);
            step = 3;
        }
        else
        {
            Console.WriteLine("Cod invalid");
            validCode = false;
        }
    }

    private async Task SchimbaParola()
    {
        matchPassword = true;
        if(parolaNoua != confirmareParola)
        {
            matchPassword = false;
            Console.WriteLine("Parolele nu se potrivesc");
            return;
        }

        var model = new ChangePasswordNoConnectionViewModel
        {
            Email = email,
            NewPassword = parolaNoua,
        };

        var result = await ChangePasswordService.ChangePasswordNoConnectionAsync(model);

        if (result.isSuccess)
        {
            Console.WriteLine("Parola schimbata cu succes");
        }
        else
        {
            isPasswordChanged = false;
            Console.WriteLine("Parola nu a fost schimbata");
            error = true;
            StateHasChanged();
            return;
        }

        isPasswordChanged = true;

        await Task.Delay(2000);
        NavigationManager.NavigateTo("/login");

    }
}
