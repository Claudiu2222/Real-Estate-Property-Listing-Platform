@page "/addproperty"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using RealEstateListingPlatform.App.Contracts
@using RealEstateListingPlatform.App.ViewModels
@using RealEstatePropertyListingPlatform.Domain.Enums
@inject IJSRuntime JSRuntime


@inject AuthenticationStateProvider AuthStateProvider
@* idk why it doesn't work *@
@attribute [Authorize(Roles = "User")] 
<head>
    <link href="/css/app.css" rel="stylesheet" />
    <link href="/css/editproperty.css" rel="stylesheet" />
    <link href="/css/addproperty.css" rel="stylesheet" />
    <script>
        var map;
        var marker; // Variabilă pentru a stoca marker-ul curent

        function initialize() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 46.090336, lng: 25.178616 },
                zoom: 6
            });

            google.maps.event.addListener(map, 'click', function (event) {
                // Verificăm dacă marker-ul există deja, și-l ștergem dacă da
                if (marker && marker.setMap) {
                    marker.setMap(null);
                }
                // Creăm un nou marker
                marker = new google.maps.Marker({
                    position: event.latLng,
                    map: map,
                });

                // Actualizăm valorile Latitudinii și Longitudinii în ViewModel
                var latitudeInput = document.getElementById("latitude");
                var longitudeInput = document.getElementById("longitude");
                latitudeInput.value = event.latLng.lat().toString();
                longitudeInput.value = event.latLng.lng().toString();
            });
        }

        window.getPropertyValue = function (elementId) {
            var element = document.getElementById(elementId);
            if (element) {
                return element.value;
            }
            return null;
        }
    </script>
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyCJGNELETRarTh8XctiWzsHND25SawIV1g&callback=initialize"></script>
    
    <style>
        body {
            background: linear-gradient(to right, #6a11cb 0%, #2575fc 100%) !important;
        }

    </style>
</head>


<div class="title-container">
    <h3 class="mb-4 text-center">🏠Add a new Property</h3>
</div>
<div class="@GetAlertClass() mb-3 ms-2" style="display: @(string.IsNullOrWhiteSpace(Message) ? "none" : "block");">
    <div class="d-flex align-items-center">
        <div class="me-2">
            <svg id="checkmark" xmlns="http://www.w3.org/2000/svg" style="width: 24px; height: 24px; transform-origin: center; transition: transform 0.3s ease-in-out;" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                <polyline points="22 4 12 14.01 9 11.01"></polyline>
            </svg>
        </div>
        <div>@Message</div>
    </div>
</div>
<div class="container">
    <div class="row justify-content-center">
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                    <EditForm Model="@PropertyViewModel" OnValidSubmit="@HandleValidSubmit">

                        <DataAnnotationsValidator />

                        <div class="row mb-3 ms-2">
                                <label for="streetname" class="col-sm-3 form-label">📫Street name:</label>
                            <div class="col-sm-5">
                                <InputText id="streetname" class="form-control" @bind-Value="@PropertyViewModel.StreetName" placeholder="Enter street name"></InputText>
                                <ValidationMessage For="@(() => PropertyViewModel.StreetName)" />
                            </div>
                        </div>

                        <div class="row mb-3 ms-2">
                                <label for="city" class="col-sm-3 form-label">🏢City name:</label>
                            <div class="col-sm-5">
                                <InputText id="city" class="form-control" @bind-Value="@PropertyViewModel.City" placeholder="Enter city name"></InputText>
                                <ValidationMessage For="@(() => PropertyViewModel.City)" />
                            </div>
                        </div>
                        <div class="row mb-3 ms-2">
                                <label for="region" class="col-sm-3 form-label">📍Region name:</label>
                            <div class="col-sm-5">
                                <div class="input-group">
                                    <InputSelect id="region" class="form-control" @bind-Value="@PropertyViewModel.Region">
                                        @foreach (var judet in judete)
                                        {
                                            <option value="@judet">@judet</option>
                                        }
                                    </InputSelect>
                                    <span class="input-group-append">
                                        <span class="input-group-text"><i class="bi bi-caret-down-fill"></i></span>
                                    </span>
                                </div>
                                <ValidationMessage For="@(() => PropertyViewModel.Region)" />
                            </div>
                        </div>

                        <div class="row mb-3 ms-2">
                                <label for="postalcode" class="col-sm-3 form-label">📮Postal code:</label>
                            <div class="col-sm-5">
                                <InputText id="postalcode" class="form-control" @bind-Value="@PropertyViewModel.PostalCode" placeholder="Enter postal code"></InputText>
                                <ValidationMessage For="@(() => PropertyViewModel.PostalCode)" />
                            </div>
                        </div>

                        <div class="row mb-3 ms-2">
                                <label for="country" class="col-sm-3 form-label">🌎Country :</label>
                            <div class="col-sm-5">
                                <InputText id="country" class="form-control" @bind-Value="@PropertyViewModel.Country" placeholder="Enter country"></InputText>
                                <ValidationMessage For="@(() => PropertyViewModel.Country)" />
                            </div>
                        </div>

                        <div class="row mb-3 ms-2">
                                <label for="propertyType" class="col-sm-3 form-label">🏠Property Type :</label>

                            <div class="col-sm-5">
                                <InputSelect id="propertyType" class="form-control" @bind-Value="@PropertyViewModel.PropertyType" @oninput="HandlePropertyTypeChange">

                                    @foreach (var propertyType in Enum.GetValues(typeof(PropertyType)))
                                    {
                                        <option value="@propertyType">@propertyType</option>
                                    })

                                </InputSelect>


                                <ValidationMessage For="@(() => PropertyViewModel.PropertyType)" />
                            </div>
                        </div>

                        @if(PropertyViewModel.PropertyType != PropertyType.Land) //Land doesn't have nr of rooms
                        {
                            <div class="row mb-3 ms-2">
                                    <label for="nrRooms" class="col-sm-3 form-label">🚪Number of rooms :</label>
                                <div class="col-sm-5">
                                    <InputNumber id="nrRooms" class="form-control" @bind-Value="@PropertyViewModel.NumberOfRooms" placeholder="Enter nr. of rooms"></InputNumber>
                                    <ValidationMessage For="@(() => PropertyViewModel.NumberOfRooms)" />
                                </div>
                            </div>

                        }

                        @if (PropertyViewModel.PropertyType != PropertyType.Land &&
                                      PropertyViewModel.PropertyType != PropertyType.Garage) //Land and Garage don't have nr of bathrooms
                        {
                            <div class="row mb-3 ms-2">
                                    <label for="nrBathrooms" class="col-sm-3 form-label">🚽Number of Bathrooms :</label>
                                <div class="col-sm-5">
                                    <InputNumber id="nrBathrooms"  class="form-control" @bind-Value="@PropertyViewModel.NumberOfBathrooms" placeholder="Enter nr. of bathrooms"></InputNumber>
                                    <ValidationMessage For="@(() => PropertyViewModel.NumberOfBathrooms)" />
                                </div>
                            </div>
                        }

                        @if (PropertyViewModel.PropertyType == PropertyType.Apartment ||
                             PropertyViewModel.PropertyType == PropertyType.Condo ||
                             PropertyViewModel.PropertyType == PropertyType.Office)
	                    {
                            <div class="row mb-3 ms-2">
                                    <label for="floor" class="col-sm-3 form-label">🪜Number of floor :</label>
                                <div class="col-sm-5">
                                    <InputNumber id="floor" class="form-control" @bind-Value="@PropertyViewModel.Floor" placeholder="Enter nr floor"></InputNumber>
                                    <ValidationMessage For="@(() => PropertyViewModel.Floor)" />
                                </div>
                            </div>
	                    }

                        @if (PropertyViewModel.PropertyType != PropertyType.Land &&
                                      PropertyViewModel.PropertyType != PropertyType.Farm &&
                                      PropertyViewModel.PropertyType != PropertyType.Garage) //Land, Farm and Garage don't have nr of total floors
                        {
                            <div class="row mb-3 ms-2">
                                    <label for="nrfloors" class="col-sm-3 form-label">🪜Number of total floors :</label>
                                <div class="col-sm-5">
                                    <InputNumber id="nrfloors"  class="form-control" @bind-Value="@PropertyViewModel.NumberOfFloors" placeholder="Enter nr of total floors"></InputNumber>
                                    <ValidationMessage For="@(() => PropertyViewModel.NumberOfFloors)" />
                                </div>
                            </div>
                        }

                        <div class="row mb-3 ms-2">
                                <label for="squarefeet" class="col-sm-3 form-label">📏Number of squarefeet :</label>
                            <div class="col-sm-5">
                                <InputNumber id="squarefeet" class="form-control" @bind-Value="@PropertyViewModel.SquareFeet" placeholder="Enter nr of squarefeet"></InputNumber>
                                <ValidationMessage For="@(() => PropertyViewModel.SquareFeet)" />
                            </div>
                        </div>
                            <div id="map" style="height: 400px; border-radius: 5px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);"></div>


                            <div class="row mb-3 ms-2" style="display: none;">
                                <label for="latitude" class="col-sm-3 form-label">Latitude:</label>
                                <div class="col-sm-5">
                                    <input id="latitude" class="form-control" placeholder="Enter latitude">
                                </div>
                            </div>
                            <div class="row mb-3 ms-2" style="display: none;">
                                <label for="longitude" class="col-sm-3 form-label">Longitude:</label>
                                <div class="col-sm-5">
                                    <input id="longitude" class="form-control" placeholder="Enter longitude">
                                </div>
                            </div>

                        <div class="row mb-3 ms-2">
                            <button type="submit" class="btn btn-primary save" @onclick="HandleValidSubmit">Save</button>
                            <button class="btn btn-primary cancel" @onclick="Cancel">Cancel</button>
                        </div>
                    </EditForm>
                    </div>
                    <div class="col-md-6 img-col">
                        <!-- Aici este imaginea -->
                        <img src="/prop.png" alt="Descriere imagine" class="img-fluid" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    [Inject]
    public IPropertyDataService PropertyDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public PropertyViewModel PropertyViewModel { get; set; } = new PropertyViewModel();

    public string Message { get; set; }


}

@functions {

    private List<string> judete = new List<string>
    {
        "Alba", "Arad", "Bacau", "Bihor", "Bistrita-Nasaud", "Botosani", "Braila", "Brasov", "Buzau", "Bucuresti",
        "Cluj", "Constanta", "Galati", "Giurgiu", "Iasi", "Ilfov", "Maramures", "Mures", "Neamt", "Prahova",
        "Satu Mare", "Sibiu", "Suceava", "Teleorman", "Timis", "Tulcea", "Vrancea"
    };

    private void HandlePropertyTypeChange(ChangeEventArgs e)
    {
        PropertyViewModel.NumberOfFloors = 0;
        PropertyViewModel.NumberOfBathrooms = 0;
        PropertyViewModel.NumberOfFloors = 0;
        PropertyViewModel.Floor = 0;
        PropertyViewModel.NumberOfRooms = 0;
        PropertyViewModel.SquareFeet = 0;
    }
    private async Task HandleValidSubmit()
    {
        Console.WriteLine("Submit"); // Verificăm dacă metoda este apelată corect

        // Resetăm mesajul de eroare
        Message = null;

        // Adăugăm latitudinea și longitudinea în PropertyViewModel folosind JavaScript
        PropertyViewModel.Latitude = await JSRuntime.InvokeAsync<string>("getPropertyValue", "latitude");
        PropertyViewModel.Longitude = await JSRuntime.InvokeAsync<string>("getPropertyValue", "longitude");

        var result = await PropertyDataService.CreatePropertyAsync(PropertyViewModel);
        if (result.Success)
        {
            // Mesaj de succes
            Message = "Property created successfully";

            // Resetăm starea formularului și a componentei
            PropertyViewModel = new PropertyViewModel(); // Resetăm ViewModel-ul
            StateHasChanged(); // Actualizăm starea componentei pentru a reprezenta modificările

            // Navigăm la o altă pagină după o scurtă întârziere
            await Task.Delay(2500);
            NavigationManager.NavigateTo("/viewproperties");
        }
        else
        {
            // Dacă există erori de validare, afișăm prima eroare
            if (result.ValidationErrors.Count != 0)
            {
                Message = result.ValidationErrors[0];
            }
            else
            {
                // Dacă există alte tipuri de erori, afișăm un mesaj generic
                Message = "An error occurred while processing your request.";
            }
        }

        // Actualizăm starea componentei pentru a reflecta schimbările
        StateHasChanged();
    }

    private string GetAlertClass()
    {
        if (string.IsNullOrWhiteSpace(Message))
        {
            return "alert alert-info"; // sau o altă clasă pentru alerte informative
        }

        if(Message.StartsWith("Longitude") || Message.StartsWith("Latitude"))
        {
            Message = "Please select a location on the map";
        }


        return Message.StartsWith("Property created successfully") ? "alert alert-success" : "alert alert-danger";
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/viewproperties");
    }

}
